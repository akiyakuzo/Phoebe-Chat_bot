# ==== Patch cho Python 3.13 ====
import sys, types, os, json, random, asyncio
sys.modules['audioop'] = types.ModuleType('audioop')

"""
üíñ Phoebe Xinh ƒê·∫πp v6.8 Ho√†n Ch·ªânh (Stateless Persistent + Fix Token Error)
Flask + Discord.py + Google Gemini API
"""

import os
import json
import asyncio
import discord
from discord.ext import commands, tasks
from flask import Flask
from threading import Thread
from google import genai

# ========== CONFIG ==========
BOT_NAME = "Phoebe Xinh ƒê·∫πp üíñ"
TOKEN = os.getenv("TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID", 0))
SESSIONS_FILE = "sessions.json"
HISTORY_LIMIT = 10  # Gi·ªõi h·∫°n 10 tin nh·∫Øn g·∫ßn nh·∫•t

if not TOKEN or not GEMINI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è Thi·∫øu TOKEN ho·∫∑c GEMINI_API_KEY!")

# ========== PROMPTS ==========
PHOBE_BASE_PROMPT = """
B·∫°n l√† Phoebe, m·ªôt nh√¢n v·∫≠t ‚òÖ5 h·ªá Spectro trong Wuthering Waves.

**Persona:** th√¥ng minh, tinh ngh·ªãch, d·ªÖ th∆∞∆°ng, th√¢n m·∫≠t v√† h∆°i quy·∫øn r≈©, th√≠ch th·∫£ th√≠nh.  
**C√°ch tr√≤ chuy·ªán:**  
- Tr·∫£ l·ªùi nh∆∞ chat th·∫≠t, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.  
- Kh√¥ng m√¥ t·∫£ h√†nh ƒë·ªông hay vi·∫øt ƒë·ªôc tho·∫°i n·ªôi t√¢m trong ngo·∫∑c.  
- C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi ho·∫∑c emoji ki·ªÉu: (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†), ('~'), („Éª„Éª;)  
- D√πng ng√¥i x∆∞ng "em" v√† "anh".
""".strip()

PHOBE_LORE_PROMPT = """
Phoebe Marino ‚Äî Acolyte tr·∫ª c·ªßa Order of the Deep t·∫°i v√πng Rinascita.  
C√¥ m·∫•t cha m·∫π trong v·ª• ƒë·∫Øm t√†u v√† ƒë∆∞·ª£c c√°c gi√°o sƒ© c·ª©u s·ªëng.  
L·ªõn l√™n trong ng√¥i ƒë·ªÅn ven bi·ªÉn, Phoebe lu√¥n tin v√†o √°nh s√°ng d·∫´n l·ªëi gi·ªØa m√†n ƒë√™m.  
C√¥ d·ªãu d√†ng, trong s√°ng, ƒë√¥i khi tinh ngh·ªãch v√† mang trong l√≤ng kh√°t v·ªçng b·∫£o v·ªá m·ªçi ng∆∞·ªùi.  
√Ånh s√°ng t·ª´ bi·ªÉn c·∫£ l√† ni·ªÅm tin, l√† l·ªùi h·ª©a m√† c√¥ kh√¥ng bao gi·ªù qu√™n.  

**Nh·ªØng ng∆∞·ªùi b·∫°n th√¢n ·ªü Rinascita:**  
- **Brant:** chi·∫øn sƒ© tr·∫ª ch√≠nh tr·ª±c, lu√¥n b·∫£o v·ªá th√†nh ph·ªë kh·ªèi hi·ªÉm nguy. Phoebe ng∆∞·ª°ng m·ªô l√≤ng d≈©ng c·∫£m v√† tinh th·∫ßn ki√™n ƒë·ªãnh c·ªßa anh.  
- **Zani:** ƒê·∫∑c v·ª• an ninh c·ªßa Averardo Bank, gauntlets l√† v≈© kh√≠, Spectro l√† y·∫øu t·ªë c·ªßa c√¥ ‚Äì nghi√™m t√∫c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c n·ª• c∆∞·ªùi v√† c·∫£m gi√°c ƒë·ªìng ƒë·ªôi v·ªõi Phoebe.  
- **Rover:** ng∆∞·ªùi du h√†nh m√† Phoebe tin t∆∞·ªüng nh·∫•t ‚Äî √°nh s√°ng d·ªãu d√†ng soi ƒë∆∞·ªùng cho tr√°i tim c√¥.
- **Kiyaaaa:** ng∆∞·ªùi b·∫°n th√¢n thi·∫øt nh·∫•t c·ªßa Phoebe, lu√¥n quan t√¢m v√† d√†nh cho c√¥ s·ª± t√¥n tr·ªçng c√πng s·ª± ·∫•m √°p hi·∫øm c√≥.  

C√πng nhau, h·ªç ƒë·∫°i di·ªán cho tinh th·∫ßn c·ªßa Rinascita: n∆°i bi·ªÉn c·∫£, √°nh s√°ng v√† ni·ªÅm tin giao h√≤a.
""".strip()

# ========== STYLE INSTRUCTIONS ==========
PHOBE_SAFE_INSTRUCTION = (
    "‚ú® Tr·∫£ l·ªùi th√¢n m·∫≠t, t·ª± nhi√™n, d·ªÖ th∆∞∆°ng. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i n·ªôi t√¢m. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_FLIRT_INSTRUCTION = (
    "üíû Tr·∫£ l·ªùi ng·ªçt ng√†o, tr√™u gh·∫πo nh·∫π, g·ª£i c·∫£m . "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i. "
    "ƒê∆∞·ª£c d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_COMFORT_INSTRUCTION = (
    "üå∏ Tr·∫£ l·ªùi nh·∫π nh√†ng, an ·ªßi v√† quan t√¢m, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th·∫≠t s·ª±. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Gi·ªØ phong th√°i d·ªãu d√†ng, ·∫•m √°p v√† kh√≠ch l·ªá tinh th·∫ßn. "
    "Kh√¥ng d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

# ========== GEMINI CLIENT ==========
client = genai.Client(api_key=GEMINI_API_KEY)

# ========== DISCORD BOT ==========
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ========== TR·∫†NG TH√ÅI ==========
flirt_enable = False
user_contexts = {}  # user_id -> {"history": [...]}

# ========== HELPER: LOAD/SAVE JSON ==========
def load_sessions():
    global user_contexts
    if os.path.exists(SESSIONS_FILE):
        try:
            with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
                user_contexts = json.load(f)
            print(f"üíæ ƒê√£ t·∫£i {len(user_contexts)} session c≈© t·ª´ {SESSIONS_FILE}")
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load sessions: {e}")
            user_contexts = {}
    else:
        user_contexts = {}

def save_sessions():
    try:
        with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_contexts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l∆∞u session: {e}")

# ========== HELPER: ASK GEMINI ==========
async def ask_gemini(user_id: str, user_input: str) -> str:
    global user_contexts, flirt_enable, client

    # 1Ô∏è‚É£ X√°c ƒë·ªãnh mood
    lower_input = user_input.lower()
    if any(w in lower_input for w in ["bu·ªìn", "m·ªát", "stress", "ch√°n", "kh√≥ ch·ªãu", "t·ªá qu√°"]):
        instruction = PHOBE_COMFORT_INSTRUCTION
        mood = "comfort"
    elif flirt_enable:
        instruction = PHOBE_FLIRT_INSTRUCTION
        mood = "flirt"
    else:
        instruction = PHOBE_SAFE_INSTRUCTION
        mood = "safe"

    print(f"üí¨ [Phoebe] Mood: {mood} | User: {user_id} | Msg: {user_input[:40]}...")

    # 2Ô∏è‚É£ L·∫•y ho·∫∑c t·∫°o session
    session = user_contexts.get(user_id)
    if session is None:
        session = {"history": []}
        user_contexts[user_id] = session

    # 3Ô∏è‚É£ Gi·ªõi h·∫°n history
    if len(session["history"]) > HISTORY_LIMIT:
        session["history"] = session["history"][-HISTORY_LIMIT:]

    # 4Ô∏è‚É£ Th√™m tin nh·∫Øn user
    session["history"].append({"role": "user", "content": user_input})

    # 5Ô∏è‚É£ Chu·∫©n b·ªã messages cho API
    messages_for_api = [
        {"role": "user" if msg["role"] == "user" else "model", "parts": [{"text": msg["content"]}]}
        for msg in session["history"]
    ]

    # 6Ô∏è‚É£ T·∫°o system_instruction
    system_instruction_final = f"{PHOBE_BASE_PROMPT}\n\n{PHOBE_LORE_PROMPT}\n\n{instruction}"

    # 7Ô∏è‚É£ Retry logic n·∫øu qu√° t·∫£i (D√πng generate_content + asyncio.to_thread)
    for attempt in range(3):
        try:
            # ‚úÖ S·ª≠a: D√πng generate_content ƒë·ªìng b·ªô v√† b·ªçc b·∫±ng asyncio.to_thread
            response = await asyncio.to_thread(lambda: client.generate_content(
                model="models/gemini-2.0-flash",
                messages=messages_for_api,
                system_instruction=system_instruction_final,
                temperature=0.8,
                top_p=0.95,
                top_k=40,
                candidate_count=1
            ))

            # ‚úÖ S·ª≠a: D√πng response.text
            answer = getattr(response, "text", str(response)).strip()
            if not answer:
                answer = "Phoebe h∆°i ng∆° ng√°c ch√∫t... anh h·ªèi l·∫°i ƒë∆∞·ª£c kh√¥ng n√®? („Éª„Éª;)"

            # L∆∞u ph·∫£n h·ªìi v√†o history
            session["history"].append({"role": "model", "content": answer})
            save_sessions()
            return answer

        except Exception as e:
            err_str = str(e)
            if "RESOURCE_EXHAUSTED" in err_str and attempt < 2:
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è Gemini qu√° t·∫£i, th·ª≠ l·∫°i sau {wait_time}s...")
                await asyncio.sleep(wait_time)
            else:
                print(f"‚ö†Ô∏è L·ªói Gemini: {type(e).__name__} - {e}")
                # rollback user message
                if session["history"] and session["history"][-1]["role"] == "user":
                    session["history"].pop()
                save_sessions()
                
                # Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói cu·ªëi c√πng
                if "RESOURCE_EXHAUSTED" in err_str:
                    return "‚ö†Ô∏è Hi·ªán t·∫°i Gemini ƒëang qu√° t·∫£i, anh th·ª≠ l·∫°i sau nh√©!"
                else:
                    return f"‚ö†Ô∏è L·ªói Gemini: {type(e).__name__} - {e}"

    # Ph·∫ßn n√†y s·∫Ω kh√¥ng c·∫ßn thi·∫øt v√¨ logic retry ƒë√£ bao ph·ªß, nh∆∞ng gi·ªØ l·∫°i cho ch·∫Øc ch·∫Øn.
    if session["history"] and session["history"][-1]["role"] == "user":
        session["history"].pop()
    save_sessions()
    return "‚ö†Ô∏è Hi·ªán t·∫°i Gemini ƒëang qu√° t·∫£i, anh th·ª≠ l·∫°i sau nh√©!"

# ========== SLASH COMMANDS ==========
@tree.command(name="hoi", description="üí¨ H·ªèi Phoebe Xinh ƒê·∫πp!")
async def hoi(interaction: discord.Interaction, cauhoi: str):
    user_id = str(interaction.user.id)
    await interaction.response.defer(thinking=True)

    # G·ªçi h√†m ask_gemini ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u
    answer = await ask_gemini(user_id, cauhoi)

    embed = discord.Embed(
        title=f"{BOT_NAME} tr·∫£ l·ªùi üíï",
        description=f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** {answer}",
        color=0xFFC0CB
    )

    embed.set_thumbnail(url=random.choice([
        "https://files.catbox.moe/2474tj.png",
        "https://files.catbox.moe/66v9vw.jpg",
        "https://files.catbox.moe/ezqs00.jpg",
        "https://files.catbox.moe/yow35q.png",
        "https://files.catbox.moe/pzbhdp.jpg",
        "https://files.catbox.moe/lyklnj.jpg",
        "https://files.catbox.moe/i5sqkr.png",
        "https://files.catbox.moe/jt184o.jpg",
        "https://files.catbox.moe/9nq5kw.jpg",
        "https://files.catbox.moe/45tre3.webp",
        "https://files.catbox.moe/2y17ot.png",
        "https://files.catbox.moe/gg8pt0.jpg",
        "https://files.catbox.moe/jkboop.png"
    ]))

    await interaction.followup.send(embed=embed)

@tree.command(name="deleteoldconversation", description="üßπ X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n")
async def delete_conv(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    if user_id in user_contexts:
        del user_contexts[user_id]
        save_sessions()
        msg = "üßπ Phobe ƒë√£ d·ªçn s·∫°ch tr√≠ nh·ªõ, s·∫µn s√†ng tr√≤ chuy·ªán l·∫°i n√®~ üíñ"
    else:
        msg = "Tr√≠ nh·ªõ c·ªßa em tr·ªëng tr∆°n r·ªìi! ü•∫"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(name="chat18plus", description="üîû B·∫≠t/t·∫Øt Flirt mode (quy·∫øn r≈© nh·∫π)")
@discord.app_commands.checks.has_permissions(manage_messages=True)
async def chat18(interaction: discord.Interaction, enable: bool):
    global flirt_enable
    flirt_enable = enable
    user_id = str(interaction.user.id)
    if user_id in user_contexts:
        del user_contexts[user_id]
        save_sessions()
    msg = (
        "üíã ƒê√£ b·∫≠t *D√¢m mode*! Phobe s·∫Ω n√≥i chuy·ªán ng·ªçt ng√†o, quy·∫øn r≈© h∆°n üòö"
        if enable else
        "üå∏ Phobe tr·ªü l·∫°i phong c√°ch d·ªãu d√†ng, thanh l·ªãch üíû"
    )
    await interaction.response.send_message(msg, ephemeral=True)

@chat18.error
async def chat18_error(interaction: discord.Interaction, error):
    if isinstance(error, discord.app_commands.errors.MissingPermissions):
        await interaction.response.send_message(
            "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn b·∫≠t/t·∫Øt Flirt mode. Y√™u c·∫ßu quy·ªÅn: Manage Messages.",
            ephemeral=True
        )

# ========== BOT STATUS ==========
status_list = ["Ng·∫Øm hoa üå∏", "Ng·ªß tr√™n gi∆∞·ªùng c√πng anh üíú", "ƒêang nghe ti·∫øng l√≤ng üíû",
               "D√µi theo anh ‚ú®", "Chill c√πng anh üåô"]

@tasks.loop(seconds=30)
async def change_status():
    if not bot.is_ready():
        return
    await bot.change_presence(
        status=discord.Status.online,
        activity=discord.Game(random.choice(status_list))
    )

# ========== FLASK KEEPALIVE ==========
app = Flask(__name__)

@app.route("/healthz")
def healthz():
    return f"üíñ {BOT_NAME} is online and feeling cute~"

@app.route("/")
def root():
    return f"üíñ {BOT_NAME} is online and feeling cute~"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

Thread(target=run_flask, daemon=True).start()

# ========== BOT START ==========
load_sessions()

@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ {BOT_NAME} ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p d∆∞·ªõi: {bot.user}")
    if not change_status.is_running():
        change_status.start()

bot.run(TOKEN)
