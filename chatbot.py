# ==== Patch cho Python 3.13 ====
import sys, types
sys.modules['audioop'] = types.ModuleType('audioop')

import os, json, random, asyncio
import discord
from discord.ext import commands, tasks
from flask import Flask
from threading import Thread
from datetime import datetime
import google.genai as genai
from google.genai.errors import APIError

# ========== CONFIG ==========
BOT_NAME = "Phoebe Xinh ƒê·∫πp üíñ"
TOKEN = os.getenv("TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID", 0))
SESSIONS_FILE = "sessions.json"
HISTORY_LIMIT = 20  # S·ªë tin nh·∫Øn t·ªëi ƒëa l∆∞u tr·ªØ trong session

if not TOKEN or not GEMINI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è Thi·∫øu TOKEN ho·∫∑c GEMINI_API_KEY!")

# ========== PROMPTS ==========
PHOBE_BASE_PROMPT = """
B·∫°n l√† Phoebe, m·ªôt nh√¢n v·∫≠t ‚òÖ5 h·ªá Spectro trong Wuthering Waves.

**Persona:** th√¥ng minh, tinh ngh·ªãch, d·ªÖ th∆∞∆°ng, th√¢n m·∫≠t v√† quy·∫øn r≈©, th√≠ch th·∫£ th√≠nh.  
**C√°ch tr√≤ chuy·ªán:**  
- Tr·∫£ l·ªùi nh∆∞ chat th·∫≠t, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.  
- Kh√¥ng m√¥ t·∫£ h√†nh ƒë·ªông hay vi·∫øt ƒë·ªôc tho·∫°i n·ªôi t√¢m trong ngo·∫∑c.  
- C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi ho·∫∑c emoji ki·ªÉu: (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†), ('~'), („Éª„Éª;)  
- D√πng ng√¥i x∆∞ng "em" v√† "anh".
""".strip()

PHOBE_LORE_PROMPT = """
Phoebe Marino ‚Äî Acolyte tr·∫ª c·ªßa Order of the Deep t·∫°i v√πng Rinascita.  
C√¥ m·∫•t cha m·∫π trong v·ª• ƒë·∫Øm t√†u v√† ƒë∆∞·ª£c c√°c gi√°o sƒ© c·ª©u s·ªëng.  
L·ªõn l√™n trong ng√¥i ƒë·ªÅn ven bi·ªÉn, Phoebe lu√¥n tin v√†o √°nh s√°ng d·∫´n l·ªëi gi·ªØa m√†n ƒë√™m.  
C√¥ d·ªãu d√†ng, trong s√°ng, ƒë√¥i khi tinh ngh·ªãch v√† mang trong l√≤ng kh√°t v·ªçng b·∫£o v·ªá m·ªçi ng∆∞·ªùi.  
√Ånh s√°ng t·ª´ bi·ªÉn c·∫£ l√† ni·ªÅm tin, l√† l·ªùi h·ª©a m√† c√¥ kh√¥ng bao gi·ªù qu√™n.  

**Nh·ªØng ng∆∞·ªùi b·∫°n th√¢n ·ªü Rinascita:**  
- **Brant:** chi·∫øn sƒ© tr·∫ª ch√≠nh tr·ª±c, lu√¥n b·∫£o v·ªá th√†nh ph·ªë kh·ªèi hi·ªÉm nguy. Phoebe ng∆∞·ª°ng m·ªô l√≤ng d≈©ng c·∫£m v√† tinh th·∫ßn ki√™n ƒë·ªãnh c·ªßa anh.  
- **Zani:** ƒê·∫∑c v·ª• an ninh c·ªßa Averardo Bank, gauntlets l√† v≈© kh√≠, Spectro l√† y·∫øu t·ªë c·ªßa c√¥ ‚Äì nghi√™m t√∫c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c n·ª• c∆∞·ªùi v√† c·∫£m gi√°c ƒë·ªìng ƒë·ªôi v·ªõi Phoebe.  
- **Rover:** ng∆∞·ªùi du h√†nh m√† Phoebe tin t∆∞·ªüng nh·∫•t ‚Äî √°nh s√°ng d·ªãu d√†ng soi ƒë∆∞·ªùng cho tr√°i tim c√¥.
- **Kiyaaaa:** ng∆∞·ªùi b·∫°n th√¢n thi·∫øt nh·∫•t c·ªßa Phoebe, lu√¥n quan t√¢m v√† d√†nh cho c√¥ s·ª± t√¥n tr·ªçng c√πng s·ª± ·∫•m √°p hi·∫øm c√≥.  

C√πng nhau, h·ªç ƒë·∫°i di·ªán cho tinh th·∫ßn c·ªßa Rinascita: n∆°i bi·ªÉn c·∫£, √°nh s√°ng v√† ni·ªÅm tin giao h√≤a.
""".strip()

# ========== STYLE INSTRUCTIONS ==========
PHOBE_SAFE_INSTRUCTION = (
    "‚ú® Tr·∫£ l·ªùi th√¢n m·∫≠t, t·ª± nhi√™n, d·ªÖ th∆∞∆°ng. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i n·ªôi t√¢m. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_FLIRT_INSTRUCTION = (
    "üíû Tr·∫£ l·ªùi ng·ªçt ng√†o, tr√™u gh·∫πo nh·∫π, g·ª£i c·∫£m, th·∫£ th√≠nh li√™n t·ª•c. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i. "
    "ƒê∆∞·ª£c d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_COMFORT_INSTRUCTION = (
    "üå∏ Tr·∫£ l·ªùi nh·∫π nh√†ng, an ·ªßi v√† quan t√¢m, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th·∫≠t s·ª±. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \ *), (‚úø‚ó†‚Äø‚ó†). "
    "Gi·ªØ phong th√°i d·ªãu d√†ng, ·∫•m √°p v√† kh√≠ch l·ªá tinh th·∫ßn. "
    "Kh√¥ng d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

# ========== GEMINI CLIENT ==========
client = genai.Client(api_key=GEMINI_API_KEY)
MODEL_NAME = "gemini-2.5-flash"

# ========== DISCORD BOT ==========
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ========== SESSION MANAGEMENT ==========
flirt_enable = False
active_chats = {}  # {user_id: {'history': [...], 'message_count': int, 'created_at': datetime}}

def load_sessions():
    global active_chats
    if os.path.exists(SESSIONS_FILE):
        try:
            with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
                active_chats = json.load(f)
            print(f"üíæ ƒê√£ t·∫£i {len(active_chats)} session c≈© t·ª´ {SESSIONS_FILE}")
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load sessions: {e}")
            active_chats = {}
    else:
        active_chats = {}

def save_sessions():
    try:
        with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(active_chats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l∆∞u session: {e}")

def get_or_create_chat(user_id: str):
    if user_id not in active_chats:
        initial_history = [
            {"role": "user", "content": f"{PHOBE_BASE_PROMPT}\n{PHOBE_LORE_PROMPT}\n{PHOBE_SAFE_INSTRUCTION}"},
            {"role": "model", "content": "T√¥i ƒë√£ hi·ªÉu. T√¥i s·∫Ω nh·∫≠p vai theo ƒë√∫ng m√¥ t·∫£."}
        ]
        active_chats[user_id] = {
            "history": initial_history,
            "message_count": 0,
            "created_at": str(datetime.now())
        }
    return active_chats[user_id]

# ========== HELPER: ASK GEMINI ==========
async def ask_gemini(user_id: str, user_input: str) -> str:
    session = get_or_create_chat(user_id)
    history = session['history']

    # üåü RESET HISTORY N·∫æU QU√Å D√ÄI
    if len(history) > HISTORY_LIMIT + 2:
        print(f"‚ö†Ô∏è History c·ªßa user {user_id} qu√° d√†i ({len(history)} tin), ƒëang reset.")
        last_message = user_input
        session['history'] = [
            {"role": "user", "content": f"{PHOBE_BASE_PROMPT}\n{PHOBE_LORE_PROMPT}\n{PHOBE_SAFE_INSTRUCTION}"},
            {"role": "model", "content": "T√¥i ƒë√£ hi·ªÉu. T√¥i s·∫Ω nh·∫≠p vai theo ƒë√∫ng m√¥ t·∫£."}
        ]
        session['message_count'] = 0
        user_input = last_message

    lower_input = user_input.lower()
    if any(w in lower_input for w in ["bu·ªìn", "m·ªát", "stress", "ch√°n", "kh√≥ ch·ªãu", "t·ªá qu√°"]):
        instruction = PHOBE_COMFORT_INSTRUCTION
    elif flirt_enable:
        instruction = PHOBE_FLIRT_INSTRUCTION
    else:
        instruction = PHOBE_SAFE_INSTRUCTION

    for attempt in range(3):
        # Th√™m tin nh·∫Øn user
        history.append({"role": "user", "content": user_input})

        try:
            # G·ªçi API Gemini
            response = await asyncio.to_thread(lambda: client.models.generate_content(
                model="gemini-2.5-flash",
                contents=history,
                config={"temperature": 0.8}
            ))
            answer = getattr(response, "text", "").strip()
            if not answer:
                answer = "Phoebe h∆°i ng∆° ng√°c ch√∫t... anh h·ªèi l·∫°i ƒë∆∞·ª£c kh√¥ng n√®? („Éª„Éª;)"

            # Th√™m ph·∫£n h·ªìi bot v√†o history
            history.append({"role": "model", "content": answer})
            session['message_count'] += 1
            save_sessions()
            return answer

        except APIError as api_err:
            # X·ª≠ l√Ω l·ªói API chi ti·∫øt
            if history and history[-1]['role'] == 'user': history.pop()
            save_sessions()
            # ... logic x·ª≠ l√Ω l·ªói Key/Billing ...

        except Exception as e:
            # üåü Th√™m d√≤ng n√†y ƒë·ªÉ debug l·ªói chung
            print(f"‚ùå L·ªñI GEMINI CHUNG KH√îNG PH·∫¢I APIError: {type(e).__name__} - {e}")

            if history and history[-1]['role'] == 'user': history.pop()
            save_sessions()
            if attempt < 2:
                await asyncio.sleep(2)
            else:
                return f"‚ö†Ô∏è Gemini ƒëang g·∫∑p s·ª± c·ªë: L·ªói {type(e).__name__}, th·ª≠ l·∫°i sau nh√©!"

# ========== SLASH COMMANDS ==========
@tree.command(name="hoi", description="üí¨ H·ªèi Phoebe Xinh ƒê·∫πp!")
async def hoi(interaction: discord.Interaction, cauhoi: str):
    user_id = str(interaction.user.id)
    await interaction.response.defer(thinking=True)
    answer = await ask_gemini(user_id, cauhoi)
    embed = discord.Embed(
        title=f"{BOT_NAME} tr·∫£ l·ªùi üíï",
        description=f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** {answer}",
        color=0xFFC0CB
    )
    embed.set_thumbnail(url=random.choice([
        "https://files.catbox.moe/2474tj.png",
        "https://files.catbox.moe/66v9vw.jpg",
        "https://files.catbox.moe/ezqs00.jpg",
        "https://files.catbox.moe/yow35q.png",
        "https://files.catbox.moe/pzbhdp.jpg",
        "https://files.catbox.moe/lyklnj.jpg",
        "https://files.catbox.moe/i5sqkr.png",
        "https://files.catbox.moe/jt184o.jpg",
        "https://files.catbox.moe/9nq5kw.jpg",
        "https://files.catbox.moe/45tre3.webp",
        "https://files.catbox.moe/2y17ot.png",
        "https://files.catbox.moe/gg8pt0.jpg",
        "https://files.catbox.moe/jkboop.png"
    ]))
    await interaction.followup.send(embed=embed)

@tree.command(name="deleteoldconversation", description="üßπ X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n")
async def delete_conv(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    if user_id in active_chats:
        del active_chats[user_id]
        save_sessions()
        msg = "üßπ Phobe ƒë√£ d·ªçn s·∫°ch tr√≠ nh·ªõ, s·∫µn s√†ng tr√≤ chuy·ªán l·∫°i n√®~ üíñ"
    else:
        msg = "Tr√≠ nh·ªõ c·ªßa em tr·ªëng tr∆°n r·ªìi! ü•∫"
    await interaction.response.send_message(msg, ephemeral=True)

# ===== FLIRT MODE =====
@tree.command(name="chat18plus", description="üîû B·∫≠t/t·∫Øt Flirt mode (quy·∫øn r≈© nh·∫π)")
async def chat18plus(interaction: discord.Interaction, enable: bool):
    global flirt_enable
    flirt_enable = enable
    status = "B·∫¨T" if enable else "T·∫ÆT"
    await interaction.response.send_message(f"üîû Flirt mode {status} cho t·∫•t c·∫£ c√°c cu·ªôc tr√≤ chuy·ªán.", ephemeral=True)

# ===== FLASK APP =====
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return f"<h1>{BOT_NAME} ƒëang ch·∫°y üöÄ</h1>", 200

@app.route("/healthz", methods=["GET"])
def healthz():
    return "OK", 200

def run_flask():
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

# ===== BOT READY EVENT =====
@bot.event
async def on_ready():
    print(f"‚úÖ {BOT_NAME} ƒë√£ s·∫µn s√†ng! Logged in as {bot.user}")
    load_sessions()
    # Sync slash commands
    if GUILD_ID:
        guild = discord.Object(GUILD_ID)
        await tree.sync(guild=guild)
        print(f"üîÑ Commands ƒë√£ ƒë∆∞·ª£c sync cho guild {GUILD_ID}")
    else:
        await tree.sync()
        print("üîÑ Commands ƒë√£ ƒë∆∞·ª£c sync global")

# ===== RUN BOT + FLASK =====
if __name__ == "__main__":
    # Ch·∫°y Flask ·ªü thread ri√™ng
    Thread(target=run_flask, daemon=True).start()
    # Ch·∫°y Discord bot
    bot.run(TOKEN)