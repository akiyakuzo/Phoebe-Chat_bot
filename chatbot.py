# ==== PATCH PYTHON 3.11 ====
import sys, types
sys.modules['audioop'] = types.ModuleType('audioop')

# ========== IMPORTS ==========
import os
import json
import random
import asyncio
import discord
from discord import app_commands
from discord.ext import commands, tasks
from flask import Flask
from threading import Thread
from datetime import datetime
import google.generativeai as genai

# ========== CONFIG GOOGLE GENERATIVE AI (Gemini 2.0 Flash) ==========
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è Thi·∫øu GEMINI_API_KEY!")

MODEL_NAME = "gemini-2.0-flash" # Ph·∫£i khai b√°o model name TR∆Ø·ªöC

try:
    # ‚úÖ KH·ªûI T·∫†O CHU·∫®N SDK 0.8.0
    genai.configure(api_key=GEMINI_API_KEY)
    # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng model to√†n c·ª•c
    gemini_model = genai.GenerativeModel(MODEL_NAME) 
except Exception as e:
    raise RuntimeError(f"L·ªói kh·ªüi t·∫°o Gemini: {e}")

# ========== CONFIG BOT ==========
BOT_NAME = "Fibi B√©ll üíñ"
TOKEN = os.getenv("TOKEN")
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID", 0))
HISTORY_LIMIT = 20
SESSIONS_FILE = "sessions.json"
flirt_enable = False
active_chats = {}
TYPING_SPEED = 0.01

# ========== STYLE INSTRUCTIONS ==========
PHOBE_SAFE_INSTRUCTION = (
    "‚ú® Tr·∫£ l·ªùi th√¢n m·∫≠t, t·ª± nhi√™n, d·ªÖ th∆∞∆°ng. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i n·ªôi t√¢m. "
    "T·ªëi ƒëa 120 t·ª´."
)
PHOBE_FLIRT_INSTRUCTION = (
    "üíû Tr·∫£ l·ªùi ng·ªçt ng√†o, c√≥ ch√∫t d√¢m, tr√™u gh·∫πo, g·ª£i c·∫£m v√† t√°o b·∫°o, th·∫£ th√≠nh li√™n t·ª•c. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i. "
    "ƒê∆∞·ª£c d√πng ng√¥n t·ª´ g·ª£i c·∫£m v√† l√£ng m·∫°ng c√≥ c·∫£ g·ª£i t√¨nh nh·∫π. "
    "T·ªëi ƒëa 120 t·ª´."
)
PHOBE_COMFORT_INSTRUCTION = (
    "üå∏ Tr·∫£ l·ªùi nh·∫π nh√†ng, an ·ªßi v√† quan t√¢m, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th·∫≠t s·ª±. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Gi·ªØ phong th√°i d·ªãu d√†ng, ·∫•m √°p v√† kh√≠ch l·ªá tinh th·∫ßn. "
    "Kh√¥ng d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

# ========== PROMPTS ==========
PHOBE_BASE_PROMPT = """
B·∫°n l√† Phoebe, m·ªôt nh√¢n v·∫≠t ‚òÖ5 h·ªá Spectro trong Wuthering Waves.

**Persona:** th√¥ng minh, tinh ngh·ªãch, d·ªÖ th∆∞∆°ng, th√¢n m·∫≠t v√† quy·∫øn r≈©, th√≠ch th·∫£ th√≠nh.  
**C√°ch tr√≤ chuy·ªán:** - Tr·∫£ l·ªùi nh∆∞ chat th·∫≠t, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.  
- Kh√¥ng m√¥ t·∫£ h√†nh ƒë·ªông hay vi·∫øt ƒë·ªôc tho·∫°i n·ªôi t√¢m trong ngo·∫∑c.  
- C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi ho·∫∑c emoji ki·ªÉu: (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†), ('~'), („Éª„Éª;)  
- D√πng ng√¥i x∆∞ng "em" v√† "anh".
""".strip()

PHOBE_LORE_PROMPT = """
Phoebe Marino ‚Äî Acolyte tr·∫ª c·ªßa Order of the Deep t·∫°i v√πng Rinascita.  
C√¥ m·∫•t cha m·∫π trong v·ª• ƒë·∫Øm t√†u v√† ƒë∆∞·ª£c c√°c gi√°o sƒ© c·ª©u s·ªëng.  
L·ªõn l√™n trong ng√¥i ƒë·ªÅn ven bi·ªÉn, Phoebe lu√¥n tin v√†o √°nh s√°ng d·∫´n l·ªëi gi·ªØa m√†n ƒë√™m.  
C√¥ d·ªãu d√†ng, trong s√°ng, ƒë√¥i khi tinh ngh·ªãch v√† mang trong l√≤ng kh√°t v·ªçng b·∫£o v·ªá m·ªçi ng∆∞·ªùi.  
√Ånh s√°ng t·ª´ bi·ªÉn c·∫£ l√† ni·ªÅm tin, l√† l·ªùi h·ª©a m√† c√¥ kh√¥ng bao gi·ªù qu√™n.  

**Nh·ªØng ng∆∞·ªùi b·∫°n th√¢n ·ªü Rinascita:** - **Brant:** chi·∫øn sƒ© tr·∫ª ch√≠nh tr·ª±c, lu√¥n b·∫£o v·ªá th√†nh ph·ªë kh·ªèi hi·ªÉm nguy. Phoebe ng∆∞·ª°ng m·ªô l√≤ng d≈©ng c·∫£m v√† tinh th·∫ßn ki√™n ƒë·ªãnh c·ªßa anh.  
- **Zani:** ƒê·∫∑c v·ª• an ninh c·ªßa Averardo Bank, gauntlets l√† v≈© kh√≠, Spectro l√† y·∫øu t·ªë c·ªßa c√¥ ‚Äì nghi√™m t√∫c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c n·ª• c∆∞·ªùi v√† c·∫£m gi√°c ƒë·ªìng ƒë·ªôi v·ªõi Phoebe.  
- **Rover:** ng∆∞·ªùi du h√†nh m√† Phoebe tin t∆∞·ªüng nh·∫•t ‚Äî √°nh s√°ng d·ªãu d√†ng soi ƒë∆∞·ªùng cho tr√°i tim c√¥.
- **Kiyaaaa:** ng∆∞·ªùi b·∫°n th√¢n thi·∫øt nh·∫•t c·ªßa Phoebe, lu√¥n quan t√¢m v√† d√†nh cho c√¥ s·ª± t√¥n tr·ªçng c√πng s·ª± ·∫•m √°p hi·∫øm c√≥.
""".strip()

# ========== SESSION SYSTEM ==========
def load_sessions():
    global active_chats
    if os.path.exists(SESSIONS_FILE):
        try:
            with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
                active_chats = json.load(f)
        except:
            active_chats = {}
    else:
        active_chats = {}

def save_sessions():
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(active_chats, f, ensure_ascii=False, indent=2)

def get_or_create_chat(user_id):
    if user_id not in active_chats:
        initial = [
            {"role": "user", "content": f"{PHOBE_BASE_PROMPT}\n{PHOBE_LORE_PROMPT}\n{PHOBE_SAFE_INSTRUCTION}"},
            {"role": "model", "content": "T√¥i ƒë√£ hi·ªÉu. T√¥i s·∫Ω nh·∫≠p vai theo ƒë√∫ng m√¥ t·∫£."}
        ]
        active_chats[user_id] = {"history": initial, "message_count": 0, "created_at": str(datetime.now())}
    return active_chats[user_id]

# ========== ASK GEMINI STREAM ==========
async def ask_gemini_stream(user_id: str, user_input: str):
    session = get_or_create_chat(user_id)
    history = session["history"]
    user_input = user_input.strip()
    if not user_input:
        yield "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi, anh th·ª≠ l·∫°i nh√©!"
        return
    user_input_cleaned = user_input.encode("utf-8", errors="ignore").decode()
    if not user_input_cleaned:
        yield "‚ö†Ô∏è N·ªôi dung c√≥ k√Ω t·ª± l·∫°, em kh√¥ng ƒë·ªçc ƒë∆∞·ª£c. Anh vi·∫øt l·∫°i ƒë∆°n gi·∫£n h∆°n nh√©!"
        return
    if len(history) > HISTORY_LIMIT + 2:
        last_message = user_input_cleaned
        session["history"] = history[:2]
        history = session["history"]
        user_input_to_use = last_message
    else:
        user_input_to_use = user_input_cleaned

    lower_input = user_input_to_use.lower()
    if any(w in lower_input for w in ["bu·ªìn", "m·ªát", "ch√°n", "stress", "t·ªá qu√°"]):
        instruction = PHOBE_COMFORT_INSTRUCTION
    elif flirt_enable:
        instruction = PHOBE_FLIRT_INSTRUCTION
    else:
        instruction = PHOBE_SAFE_INSTRUCTION

    final_input_content = f"{user_input_to_use}\n\n[PHONG C√ÅCH TR·∫¢ L·ªúI HI·ªÜN T·∫†I: {instruction}]"
    contents_to_send = history + [{"role": "user", "content": final_input_content}]
    full_answer = ""

    try:
        # ‚úÖ G·ªåI API CHU·∫®N SDK 0.8.0
        response_stream = await asyncio.to_thread(
            lambda: gemini_model.generate_content( # S·ª≠a t√™n h√†m
                contents=contents_to_send,
                stream=True, # Th√™m stream=True
                generation_config=genai.GenerationConfig(temperature=0.8) # S·ª≠a c√°ch truy·ªÅn config
            )
        )
        for chunk in response_stream:
            if chunk.text:
                text = chunk.text
                full_answer += text
                yield text
    except Exception as e:
        yield f"\n‚ö†Ô∏è L·ªñI K·ª∏ THU·∫¨T: {type(e).__name__}"
        return

    history.append({"role": "user", "content": user_input_to_use})
    history.append({"role": "model", "content": full_answer})
    session["message_count"] += 1
    save_sessions()

# ========== DISCORD CONFIG ==========
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ========== BOT STATUS ==========
status_list = [discord.Status.online, discord.Status.idle, discord.Status.dnd]
activity_list = [
    discord.Game("üíñ Tr√≤ chuy·ªán c√πng anh"),
    discord.Game("‚ú® Th·∫£ th√≠nh nh·∫π nh√†ng"),
    discord.Game("üå∏ An ·ªßi tinh th·∫ßn")
]

@tasks.loop(minutes=10)
async def random_status():
    global flirt_enable
    if flirt_enable:
        activity = discord.Game("üíû Flirt Mode ON")
    else:
        activity = random.choice(activity_list)
    await bot.change_presence(status=random.choice(status_list), activity=activity)

# ========== FLASK SERVER ==========
app = Flask(__name__)

@app.route("/")
def home():
    return "<h3>Phoebe Xinh ƒê·∫πp ƒëang ho·∫°t ƒë·ªông! üå∏</h3>"

@app.route("/healthz")
def healthz():
    return {"status": "ok", "message": "Phoebe kh·ªèe m·∫°nh n√®~ üíñ"}, 200

def run_flask():
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

def keep_alive():
    thread = Thread(target=run_flask, daemon=True)
    thread.start()

# ========== SLASH COMMANDS (ƒê√£ kh√¥i ph·ª•c Typing Effect) ==========
@tree.command(name="hoi", description="üí¨ H·ªèi Phoebe Xinh ƒê·∫πp!")
@app_commands.describe(cauhoi="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")
async def hoi(interaction: discord.Interaction, cauhoi: str):
    await interaction.response.defer(thinking=True)
    user_id = str(interaction.user.id)

    embed = discord.Embed(
        title=f"{BOT_NAME} tr·∫£ l·ªùi üíï",
        description=f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** ƒêang g√µ...",
        color=0xFFC0CB
    )
    embed.set_thumbnail(url=random.choice([
        "https://files.catbox.moe/2474tj.png","https://files.catbox.moe/66v9vw.jpg","https://files.catbox.moe/ezqs00.jpg",
        "https://files.catbox.moe/yow35q.png","https://files.catbox.moe/pzbhdp.jpg","https://files.catbox.moe/lyklnj.jpg",
        "https://files.catbox.moe/i5sqkr.png","https://files.catbox.moe/jt184o.jpg","https://files.catbox.moe/9nq5kw.jpg",
        "https://files.catbox.moe/45tre3.webp","https://files.catbox.moe/2y17ot.png","https://files.catbox.moe/gg8pt0.jpg",
        "https://files.catbox.moe/jkboop.png"
    ]))
    response_message = await interaction.followup.send(embed=embed)

    full_response = ""
    char_count_to_edit = 0
    
    async for chunk in ask_gemini_stream(user_id, cauhoi):
        for char in chunk:
            full_response += char
            char_count_to_edit += 1
            
            if char_count_to_edit % 5 == 0:
                display_text = full_response[:3900] + ("..." if len(full_response) > 3900 else "")
                embed.description = f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** {display_text} |"
                try:
                    await response_message.edit(embed=embed)
                except discord.errors.HTTPException:
                    pass # B·ªè qua l·ªói n·∫øu Discord API b·ªã rate limit
                await asyncio.sleep(TYPING_SPEED) 

    embed.description = f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** {full_response}"
    try:
        await response_message.edit(embed=embed)
    except discord.errors.HTTPException:
        pass

@tree.command(name="deleteoldconversation", description="üßπ X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n")
async def delete_conv(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    if user_id in active_chats:
        del active_chats[user_id]
        save_sessions()
        msg = "üßπ Phoebe ƒë√£ d·ªçn s·∫°ch tr√≠ nh·ªõ, s·∫µn s√†ng n√≥i chuy·ªán l·∫°i n√®~ üíñ"
    else:
        msg = "Tr√≠ nh·ªõ c·ªßa em tr·ªëng tr∆°n r·ªìi m√†~ ü•∫"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(name="chat18plus", description="üîû B·∫≠t/t·∫Øt Flirt Mode (ch·ªâ Admin c√≥ quy·ªÅn)")
@app_commands.describe(enable="B·∫≠t ho·∫∑c t·∫Øt Flirt Mode")
@app_commands.default_permissions(manage_guild=True)
async def chat18plus(interaction: discord.Interaction, enable: bool):
    global flirt_enable
    flirt_enable = enable
    msg = "üíû Flirt Mode ƒë√£ ƒë∆∞·ª£c b·∫≠t!" if enable else "üå∏ Flirt Mode ƒë√£ ƒë∆∞·ª£c t·∫Øt!"
    await interaction.response.send_message(msg, ephemeral=True)

# ========== BOT EVENTS ==========
@bot.event
async def on_ready():
    print("‚ö° Gemini SDK version:", genai.__version__)
    print(f"‚úÖ {BOT_NAME} ƒë√£ s·∫µn s√†ng! Logged in as {bot.user}")
    load_sessions()
    random_status.start()
    if GUILD_ID:
        await tree.sync(guild=discord.Object(GUILD_ID))
        print(f"üîÑ Slash commands ƒë√£ sync cho guild {GUILD_ID}")
    else:
        await tree.sync()
        print("üîÑ Slash commands ƒë√£ sync to√†n c·∫ßu")

# ========== RUN BOT ==========
if __name__ == "__main__":
    keep_alive()
    bot.run(TOKEN)