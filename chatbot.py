# ==== PATCH PYTHON 3.11 ====
import sys, types
sys.modules['audioop'] = types.ModuleType('audioop')

import os, json, random, asyncio
import discord
from discord.ext import commands, tasks
from flask import Flask
from threading import Thread
from datetime import datetime
import google.genai as genai
from google.genai.errors import APIError

# ========== CONFIG ==========
BOT_NAME = "Fibi B√©ll üíñ"
TOKEN = os.getenv("TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID", 0))
HISTORY_LIMIT = 20
SESSIONS_FILE = "sessions.json"

if not TOKEN or not GEMINI_API_KEY:
    raise RuntimeError("‚ö†Ô∏è Thi·∫øu TOKEN ho·∫∑c GEMINI_API_KEY!")

# ========== STYLE INSTRUCTIONS ==========
PHOBE_SAFE_INSTRUCTION = (
    "‚ú® Tr·∫£ l·ªùi th√¢n m·∫≠t, t·ª± nhi√™n, d·ªÖ th∆∞∆°ng. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i n·ªôi t√¢m. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_FLIRT_INSTRUCTION = (
    "üíû Tr·∫£ l·ªùi ng·ªçt ng√†o,c√≥ ch√∫t d√¢m, tr√™u gh·∫πo, g·ª£i c·∫£m v√† t√°o b·∫°o, th·∫£ th√≠nh li√™n t·ª•c. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Kh√¥ng vi·∫øt m√¥ t·∫£ h√†nh ƒë·ªông hay ƒë·ªôc tho·∫°i. "
    "ƒê∆∞·ª£c d√πng ng√¥n t·ª´ g·ª£i c·∫£m v√† l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

PHOBE_COMFORT_INSTRUCTION = (
    "üå∏ Tr·∫£ l·ªùi nh·∫π nh√†ng, an ·ªßi v√† quan t√¢m, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th·∫≠t s·ª±. "
    "C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi nh∆∞ (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†). "
    "Gi·ªØ phong th√°i d·ªãu d√†ng, ·∫•m √°p v√† kh√≠ch l·ªá tinh th·∫ßn. "
    "Kh√¥ng d√πng ng√¥n t·ª´ g·ª£i c·∫£m hay l√£ng m·∫°n. "
    "T·ªëi ƒëa 120 t·ª´."
)

# ========== PROMPTS ==========
PHOBE_BASE_PROMPT = """
B·∫°n l√† Phoebe, m·ªôt nh√¢n v·∫≠t ‚òÖ5 h·ªá Spectro trong Wuthering Waves.

**Persona:** th√¥ng minh, tinh ngh·ªãch, d·ªÖ th∆∞∆°ng, th√¢n m·∫≠t v√† quy·∫øn r≈©, th√≠ch th·∫£ th√≠nh.  
**C√°ch tr√≤ chuy·ªán:** - Tr·∫£ l·ªùi nh∆∞ chat th·∫≠t, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.  
- Kh√¥ng m√¥ t·∫£ h√†nh ƒë·ªông hay vi·∫øt ƒë·ªôc tho·∫°i n·ªôi t√¢m trong ngo·∫∑c.  
- C√≥ th·ªÉ d√πng c√°c bi·ªÉu c·∫£m m·∫∑t c∆∞·ªùi ho·∫∑c emoji ki·ªÉu: (* / œâ \\ *), (‚úø‚ó†‚Äø‚ó†), ('~'), („Éª„Éª;)  
- D√πng ng√¥i x∆∞ng "em" v√† "anh".
""".strip()

PHOBE_LORE_PROMPT = """
Phoebe Marino ‚Äî Acolyte tr·∫ª c·ªßa Order of the Deep t·∫°i v√πng Rinascita.  
C√¥ m·∫•t cha m·∫π trong v·ª• ƒë·∫Øm t√†u v√† ƒë∆∞·ª£c c√°c gi√°o sƒ© c·ª©u s·ªëng.  
L·ªõn l√™n trong ng√¥i ƒë·ªÅn ven bi·ªÉn, Phoebe lu√¥n tin v√†o √°nh s√°ng d·∫´n l·ªëi gi·ªØa m√†n ƒë√™m.  
C√¥ d·ªãu d√†ng, trong s√°ng, ƒë√¥i khi tinh ngh·ªãch v√† mang trong l√≤ng kh√°t v·ªçng b·∫£o v·ªá m·ªçi ng∆∞·ªùi.  
√Ånh s√°ng t·ª´ bi·ªÉn c·∫£ l√† ni·ªÅm tin, l√† l·ªùi h·ª©a m√† c√¥ kh√¥ng bao gi·ªù qu√™n.  

**Nh·ªØng ng∆∞·ªùi b·∫°n th√¢n ·ªü Rinascita:** - **Brant:** chi·∫øn sƒ© tr·∫ª ch√≠nh tr·ª±c, lu√¥n b·∫£o v·ªá th√†nh ph·ªë kh·ªèi hi·ªÉm nguy. Phoebe ng∆∞·ª°ng m·ªô l√≤ng d≈©ng c·∫£m v√† tinh th·∫ßn ki√™n ƒë·ªãnh c·ªßa anh.  
- **Zani:** ƒê·∫∑c v·ª• an ninh c·ªßa Averardo Bank, gauntlets l√† v≈© kh√≠, Spectro l√† y·∫øu t·ªë c·ªßa c√¥ ‚Äì nghi√™m t√∫c nh∆∞ng v·∫´n gi·ªØ ƒë∆∞·ª£c n·ª• c∆∞·ªùi v√† c·∫£m gi√°c ƒë·ªìng ƒë·ªôi v·ªõi Phoebe.  
- **Rover:** ng∆∞·ªùi du h√†nh m√† Phoebe tin t∆∞·ªüng nh·∫•t ‚Äî √°nh s√°ng d·ªãu d√†ng soi ƒë∆∞·ªùng cho tr√°i tim c√¥.
- **Kiyaaaa:** ng∆∞·ªùi b·∫°n th√¢n thi·∫øt nh·∫•t c·ªßa Phoebe, lu√¥n quan t√¢m v√† d√†nh cho c√¥ s·ª± t√¥n tr·ªçng c√πng s·ª± ·∫•m √°p hi·∫øm c√≥.  

C√πng nhau, h·ªç ƒë·∫°i di·ªán cho tinh th·∫ßn c·ªßa Rinascita: n∆°i bi·ªÉn c·∫£, √°nh s√°ng v√† ni·ªÅm tin giao h√≤a.
""".strip()

# ========== GEMINI CLIENT ==========
client = genai.Client(api_key=GEMINI_API_KEY)
MODEL_NAME = "gemini-2.5-flash"

# ========== DISCORD CONFIG ==========
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ========== SESSION SYSTEM ==========
flirt_enable = False
active_chats = {}

def load_sessions():
    global active_chats
    if os.path.exists(SESSIONS_FILE):
        try:
            with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
                active_chats = json.load(f)
            print(f"üíæ ƒê√£ t·∫£i {len(active_chats)} session t·ª´ {SESSIONS_FILE}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load sessions: {e}")
            active_chats = {}
    else:
        active_chats = {}

def save_sessions():
    try:
        with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(active_chats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l∆∞u sessions: {e}")

def get_or_create_chat(user_id):
    if user_id not in active_chats:
        initial = [
            {"role": "user", "content": f"{PHOBE_BASE_PROMPT}\n{PHOBE_LORE_PROMPT}\n{PHOBE_SAFE_INSTRUCTION}"},
            {"role": "model", "content": "T√¥i ƒë√£ hi·ªÉu. T√¥i s·∫Ω nh·∫≠p vai theo ƒë√∫ng m√¥ t·∫£."}
        ]
        active_chats[user_id] = {"history": initial, "message_count": 0, "created_at": str(datetime.now())}
    return active_chats[user_id]

# ========== ASK GEMINI (CHU·∫®N SDK 1.47.0 + CH·ªêNG VALIDATION ERROR) ==========
async def ask_gemini(user_id: str, user_input: str) -> str:
    session = get_or_create_chat(user_id)
    history = session["history"]

    # 1Ô∏è‚É£ L√†m s·∫°ch input
    user_input = user_input.strip()
    if not user_input:
        return "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi, anh th·ª≠ l·∫°i nh√©!"
    
    user_input_cleaned = user_input.encode("utf-8", errors="ignore").decode()
    if not user_input_cleaned:
        return "‚ö†Ô∏è N·ªôi dung c√≥ k√Ω t·ª± l·∫°, em kh√¥ng ƒë·ªçc ƒë∆∞·ª£c. Anh vi·∫øt l·∫°i ƒë∆°n gi·∫£n h∆°n nh√©!"

    # 2Ô∏è‚É£ Reset l·ªãch s·ª≠ n·∫øu qu√° d√†i
    if len(history) > HISTORY_LIMIT + 2:
        print(f"‚ö†Ô∏è Reset history user {user_id}")
        last_message = user_input_cleaned
        session["history"] = history[:2]  # gi·ªØ l·∫°i prompt g·ªëc
        history = session["history"]
        user_input_to_use = last_message
    else:
        user_input_to_use = user_input_cleaned

    # 3Ô∏è‚É£ L·ª±a ch·ªçn phong c√°ch tr·∫£ l·ªùi
    lower_input = user_input_to_use.lower()
    if any(w in lower_input for w in ["bu·ªìn", "m·ªát", "ch√°n", "stress", "t·ªá qu√°"]):
        instruction = PHOBE_COMFORT_INSTRUCTION
    elif flirt_enable:
        instruction = PHOBE_FLIRT_INSTRUCTION
    else:
        instruction = PHOBE_SAFE_INSTRUCTION

    # G·ªôp instruction v√†o n·ªôi dung g·ª≠i
    final_input_content = f"{user_input_to_use}\n\n[PHONG C√ÅCH TR·∫¢ L·ªúI HI·ªÜN T·∫†I: {instruction}]"

    # 4Ô∏è‚É£ G·ª≠i ƒë·∫øn Gemini (retry t·ªëi ƒëa 3 l·∫ßn)
    for attempt in range(3):
        # D·ªçn d·∫πp input c≈© n·∫øu l·∫ßn tr∆∞·ªõc l·ªói
        if history and history[-1]["role"] == "user":
            history.pop()

        # Th√™m input m·ªõi
        history.append({"role": "user", "content": final_input_content})

        try:
            # ‚úÇÔ∏è C·∫Øt g·ªçn l·ªãch s·ª≠
            trimmed_history = history[-HISTORY_LIMIT:]

            # üß± Chuy·ªÉn sang ƒë·ªãnh d·∫°ng h·ª£p l·ªá cho SDK 1.47.0
            structured_history = [
                {
                    "role": msg["role"],
                    "parts": [{"text": msg["content"]}]
                }
                for msg in trimmed_history
            ]

            # üöÄ G·ªçi Gemini API
            response = await asyncio.to_thread(lambda: client.models.generate_content(
                model=MODEL_NAME,
                contents=structured_history,
                temperature=0.8
            ))

            answer = getattr(response, "text", "").strip()
            if not answer:
                answer = "Phoebe h∆°i ng∆° ng√°c ch√∫t... anh h·ªèi l·∫°i ƒë∆∞·ª£c kh√¥ng n√®? („Éª„Éª;)"

            # ‚úÖ L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
            history.append({"role": "model", "content": answer})
            session["message_count"] += 1
            save_sessions()
            return answer

        except ValidationError as e:
            print(f"‚ùå ValidationError: {e}")
            if history and history[-1]["role"] == "user":
                history.pop()
            if attempt < 2:
                await asyncio.sleep(2)
                continue
            return "‚ö†Ô∏è Gemini b·∫£o n·ªôi dung n√†y kh√¥ng h·ª£p l·ªá... anh th·ª≠ g√µ l·∫°i d·ªãu d√†ng h∆°n nha~"

        except APIError as e:
            print(f"‚ùå APIError: {e}")
            if attempt < 2:
                await asyncio.sleep(2)
                continue
            return f"‚ö†Ô∏è Gemini g·∫∑p s·ª± c·ªë: {e.message[:60]}..."

        except Exception as e:
            print(f"‚ùå L·ªói kh√°c: {type(e).__name__} - {e}")
            if history and history[-1]["role"] == "user":
                history.pop()
            if attempt < 2:
                await asyncio.sleep(2)
                continue
            return f"‚ö†Ô∏è Gemini ƒëang l·ªói: {type(e).__name__}"

    # 5Ô∏è‚É£ N·∫øu t·∫•t c·∫£ th·∫•t b·∫°i
    return "‚ö†Ô∏è Gemini kh√¥ng ph·∫£n h·ªìi, th·ª≠ l·∫°i sau nh√©!"

# ========== STATUS ==========
status_list = [discord.Status.online, discord.Status.idle, discord.Status.dnd]
activity_list = [
    discord.Game("üíñ Tr√≤ chuy·ªán c√πng anh"),
    discord.Game("‚ú® Th·∫£ th√≠nh nh·∫π nh√†ng"),
    discord.Game("üå∏ An ·ªßi tinh th·∫ßn")
]

@tasks.loop(minutes=10)
async def random_status():
    global flirt_enable
    # C·∫≠p nh·∫≠t activity ng·∫´u nhi√™n, n·∫øu flirt_enable th√¨ ∆∞u ti√™n hi·ªÉn th·ªã tr·∫°ng th√°i flirt
    if flirt_enable:
         activity = discord.Game("üíû Flirt Mode ON")
    else:
         activity = random.choice(activity_list)
         
    await bot.change_presence(status=random.choice(status_list), activity=activity)

# ========== SLASH COMMANDS ==========
@tree.command(name="hoi", description="üí¨ H·ªèi Phoebe Xinh ƒê·∫πp!")
async def hoi(interaction: discord.Interaction, cauhoi: str):
    await interaction.response.defer(thinking=True)
    user_id = str(interaction.user.id)
    answer = await ask_gemini(user_id, cauhoi)

    embed = discord.Embed(
        title=f"{BOT_NAME} tr·∫£ l·ªùi üíï",
        description=f"**Ng∆∞·ªùi h·ªèi:** {interaction.user.mention}\n**C√¢u h·ªèi:** {cauhoi}\n**Phobe:** {answer}",
        color=0xFFC0CB
    )
    embed.set_thumbnail(url=random.choice([
        "https://files.catbox.moe/2474tj.png", "https://files.catbox.moe/66v9vw.jpg", 
        "https://files.catbox.moe/ezqs00.jpg", "https://files.catbox.moe/yow35q.png", 
        "https://files.catbox.moe/pzbhdp.jpg", "https://files.catbox.moe/lyklnj.jpg", 
        "https://files.catbox.moe/i5sqkr.png", "https://files.catbox.moe/jt184o.jpg", 
        "https://files.catbox.moe/9nq5kw.jpg", "https://files.catbox.moe/45tre3.webp", 
        "https://files.catbox.moe/2y17ot.png", "https://files.catbox.moe/gg8pt0.jpg", 
        "https://files.catbox.moe/jkboop.png"
    ]))
    await interaction.followup.send(embed=embed)

@tree.command(name="deleteoldconversation", description="üßπ X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n")
async def delete_conv(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    if user_id in active_chats:
        del active_chats[user_id]
        save_sessions()
        msg = "üßπ Phoebe ƒë√£ d·ªçn s·∫°ch tr√≠ nh·ªõ, s·∫µn s√†ng n√≥i chuy·ªán l·∫°i n√®~ üíñ"
    else:
        msg = "Tr√≠ nh·ªõ c·ªßa em tr·ªëng tr∆°n r·ªìi m√†~ ü•∫"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(
    name="chat18",
    description="Tr√≤ chuy·ªán 18+"
)
@app_commands.default_permissions()
async def chat18plus(interaction: discord.Interaction, enable: bool):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message(
            "‚ùå Anh kh√¥ng c√≥ quy·ªÅn **Qu·∫£n l√Ω m√°y ch·ªß** ƒë·ªÉ b·∫≠t/t·∫Øt Flirt Mode ƒë√¢u n√®~ ü•∫",
            ephemeral=True
        )
        return

    global flirt_enable
    flirt_enable = enable
    status = "B·∫¨T" if enable else "T·∫ÆT"

    # ü©∑ C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã
    new_activity = discord.Game(f"üíû Flirt Mode {status}")
    await interaction.client.change_presence(activity=new_activity)

    await interaction.response.send_message(
        f"üîû Flirt Mode **{status}** cho **to√†n b·ªô bot**.\n"
        f"Phoebe s·∫Ω tr·ªü n√™n {'ng·ªçt ng√†o h∆°n~ üíñ' if enable else 'hi·ªÅn l√†nh tr·ªü l·∫°i~ üå∏'}",
        ephemeral=True
    )

# ========== FLASK ==========
app = Flask(__name__)

@app.route("/")
def home():
    return "<h3>Phoebe Xinh ƒê·∫πp ƒëang ho·∫°t ƒë·ªông! üå∏</h3>"

@app.route("/healthz")
def healthz():
    return {"status": "ok", "message": "Phoebe kh·ªèe m·∫°nh n√®~ üíñ"}, 200

def run_flask():
    """Ch·∫°y Flask server song song v·ªõi bot Discord"""
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

def keep_alive():
    """Gi·ªØ ti·∫øn tr√¨nh s·ªëng b·∫±ng c√°ch ch·∫°y Flask tr√™n lu·ªìng n·ªÅn"""
    thread = Thread(target=run_flask, daemon=True)
    thread.start()

# ========== BOT EVENTS ==========
@bot.event
async def on_ready():
    print(f"‚úÖ {BOT_NAME} ƒë√£ s·∫µn s√†ng! Logged in as {bot.user}")
    load_sessions()
    random_status.start()
    if GUILD_ID:
        guild = discord.Object(GUILD_ID)
        await tree.sync(guild=guild)
        print(f"üîÑ Slash commands ƒë√£ sync cho guild {GUILD_ID}")
    else:
        await tree.sync()
        print("üîÑ Slash commands ƒë√£ sync to√†n c·∫ßu")

# ========== RUN ==========
if __name__ == "__main__":
    keep_alive()  # üî• G·ªçi h√†m n√†y ƒë·ªÉ Flask ch·∫°y n·ªÅn, Render/UptimeRobot c√≥ th·ªÉ ping
    bot.run(TOKEN)